// <auto-generated />
using System;

using JapaneseLanguageTools.Data.Sqlite.Contexts;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JapaneseLanguageTools.Data.Sqlite.Migrations
{
    [DbContext(typeof(SqliteMainDbContext))]
    [Migration("20240908154912_BasicSchemaMigration")]
    partial class BasicSchemaMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("NOCASE")
                .HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.Character", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<int?>("CharacterGroupId")
                    .HasColumnType("INTEGER");

                b.Property<string>("CreatedOn")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("STRFTIME('%F %T+00:00', 'now')");

                b.Property<string>("Kunyomi")
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.Property<string>("Meaning")
                    .HasMaxLength(512)
                    .HasColumnType("TEXT");

                b.Property<string>("Onyomi")
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.Property<string>("Pronunciation")
                    .HasMaxLength(32)
                    .HasColumnType("TEXT");

                b.Property<string>("Syllable")
                    .HasMaxLength(32)
                    .HasColumnType("TEXT");

                b.Property<string>("Symbol")
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasColumnType("TEXT");

                b.Property<int>("Type")
                    .HasColumnType("INTEGER");

                b.Property<string>("UpdatedOn")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("STRFTIME('%F %T+00:00', 'now')");

                b.HasKey("Id");

                b.HasIndex("CharacterGroupId")
                    .HasDatabaseName("IX_Character_CharacterGroupId");

                b.ToTable("Character", null, t =>
                {
                    t.HasCheckConstraint("CK_Character_Kunyomi_NullOrMaxLength", "\"Kunyomi\" IS NULL OR LENGTH(TRIM(\"Kunyomi\")) <= 256");

                    t.HasCheckConstraint("CK_Character_Kunyomi_NullOrNotEmpty", "\"Kunyomi\" IS NULL OR LENGTH(TRIM(\"Kunyomi\")) > 0");

                    t.HasCheckConstraint("CK_Character_Meaning_NullOrMaxLength", "\"Meaning\" IS NULL OR LENGTH(TRIM(\"Meaning\")) <= 512");

                    t.HasCheckConstraint("CK_Character_Meaning_NullOrNotEmpty", "\"Meaning\" IS NULL OR LENGTH(TRIM(\"Meaning\")) > 0");

                    t.HasCheckConstraint("CK_Character_Onyomi_NullOrMaxLength", "\"Onyomi\" IS NULL OR LENGTH(TRIM(\"Onyomi\")) <= 256");

                    t.HasCheckConstraint("CK_Character_Onyomi_NullOrNotEmpty", "\"Onyomi\" IS NULL OR LENGTH(TRIM(\"Onyomi\")) > 0");

                    t.HasCheckConstraint("CK_Character_Pronunciation_NullOrMaxLength", "\"Pronunciation\" IS NULL OR LENGTH(TRIM(\"Pronunciation\")) <= 32");

                    t.HasCheckConstraint("CK_Character_Pronunciation_NullOrNotEmpty", "\"Pronunciation\" IS NULL OR LENGTH(TRIM(\"Pronunciation\")) > 0");

                    t.HasCheckConstraint("CK_Character_Syllable_NullOrMaxLength", "\"Syllable\" IS NULL OR LENGTH(TRIM(\"Syllable\")) <= 32");

                    t.HasCheckConstraint("CK_Character_Syllable_NullOrNotEmpty", "\"Syllable\" IS NULL OR LENGTH(TRIM(\"Syllable\")) > 0");

                    t.HasCheckConstraint("CK_Character_Symbol_MaxLength", "LENGTH(TRIM(\"Symbol\")) <= 16");

                    t.HasCheckConstraint("CK_Character_Symbol_NotEmpty", "LENGTH(TRIM(\"Symbol\")) > 0");
                });
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.CharacterGroup", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("Caption")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.Property<string>("Comment")
                    .HasMaxLength(2048)
                    .HasColumnType("TEXT");

                b.Property<string>("CreatedOn")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("STRFTIME('%F %T+00:00', 'now')");

                b.Property<bool>("Enabled")
                    .HasColumnType("INTEGER");

                b.Property<string>("UpdatedOn")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("STRFTIME('%F %T+00:00', 'now')");

                b.HasKey("Id");

                b.HasAlternateKey("Caption");

                b.ToTable("CharacterGroup", null, t =>
                {
                    t.HasCheckConstraint("CK_CharacterGroup_Caption_MaxLength", "LENGTH(TRIM(\"Caption\")) <= 256");

                    t.HasCheckConstraint("CK_CharacterGroup_Caption_NotEmpty", "LENGTH(TRIM(\"Caption\")) > 0");

                    t.HasCheckConstraint("CK_CharacterGroup_Comment_NullOrMaxLength", "\"Comment\" IS NULL OR LENGTH(TRIM(\"Comment\")) <= 2048");

                    t.HasCheckConstraint("CK_CharacterGroup_Comment_NullOrNotEmpty", "\"Comment\" IS NULL OR LENGTH(TRIM(\"Comment\")) > 0");
                });
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.CharacterTag", b =>
            {
                b.Property<int>("CharacterId")
                    .HasColumnType("INTEGER");

                b.Property<int>("TagId")
                    .HasColumnType("INTEGER");

                b.HasKey("CharacterId", "TagId");

                b.HasIndex("CharacterId")
                    .HasDatabaseName("IX_CharacterTag_CharacterId");

                b.HasIndex("TagId")
                    .HasDatabaseName("IX_CharacterTag_TagId");

                b.ToTable("CharacterTag", (string)null);
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.Tag", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("Caption")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.Property<string>("CreatedOn")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("STRFTIME('%F %T+00:00', 'now')");

                b.Property<string>("PlaceholderMarker")
                    .HasMaxLength(2048)
                    .HasColumnType("TEXT");

                b.Property<string>("UpdatedOn")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("STRFTIME('%F %T+00:00', 'now')");

                b.HasKey("Id");

                b.HasAlternateKey("Caption");

                b.ToTable("Tag", null, t =>
                {
                    t.HasCheckConstraint("CK_Tag_Caption_MaxLength", "LENGTH(TRIM(\"Caption\")) <= 256");

                    t.HasCheckConstraint("CK_Tag_Caption_NotEmpty", "LENGTH(TRIM(\"Caption\")) > 0");

                    t.HasCheckConstraint("CK_Tag_PlaceholderMarker_NullOrMaxLength", "\"PlaceholderMarker\" IS NULL OR LENGTH(TRIM(\"PlaceholderMarker\")) <= 2048");

                    t.HasCheckConstraint("CK_Tag_PlaceholderMarker_NullOrNotEmpty", "\"PlaceholderMarker\" IS NULL OR LENGTH(TRIM(\"PlaceholderMarker\")) > 0");
                });
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.Word", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<int>("CharacterTypes")
                    .HasColumnType("INTEGER");

                b.Property<string>("Characters")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.Property<string>("CreatedOn")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("STRFTIME('%F %T+00:00', 'now')");

                b.Property<string>("Meaning")
                    .HasMaxLength(512)
                    .HasColumnType("TEXT");

                b.Property<string>("Pronunciation")
                    .HasMaxLength(512)
                    .HasColumnType("TEXT");

                b.Property<string>("UpdatedOn")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("STRFTIME('%F %T+00:00', 'now')");

                b.Property<int?>("WordGroupId")
                    .HasColumnType("INTEGER");

                b.HasKey("Id");

                b.HasIndex("WordGroupId")
                    .HasDatabaseName("IX_Word_WordGroupId");

                b.ToTable("Word", null, t =>
                {
                    t.HasCheckConstraint("CK_Word_Characters_MaxLength", "LENGTH(TRIM(\"Characters\")) <= 256");

                    t.HasCheckConstraint("CK_Word_Characters_NotEmpty", "LENGTH(TRIM(\"Characters\")) > 0");

                    t.HasCheckConstraint("CK_Word_Meaning_NullOrMaxLength", "\"Meaning\" IS NULL OR LENGTH(TRIM(\"Meaning\")) <= 512");

                    t.HasCheckConstraint("CK_Word_Meaning_NullOrNotEmpty", "\"Meaning\" IS NULL OR LENGTH(TRIM(\"Meaning\")) > 0");

                    t.HasCheckConstraint("CK_Word_Pronunciation_NullOrMaxLength", "\"Pronunciation\" IS NULL OR LENGTH(TRIM(\"Pronunciation\")) <= 512");

                    t.HasCheckConstraint("CK_Word_Pronunciation_NullOrNotEmpty", "\"Pronunciation\" IS NULL OR LENGTH(TRIM(\"Pronunciation\")) > 0");
                });
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.WordGroup", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("Caption")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.Property<string>("Comment")
                    .HasMaxLength(2048)
                    .HasColumnType("TEXT");

                b.Property<string>("CreatedOn")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("STRFTIME('%F %T+00:00', 'now')");

                b.Property<bool>("Enabled")
                    .HasColumnType("INTEGER");

                b.Property<string>("UpdatedOn")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("STRFTIME('%F %T+00:00', 'now')");

                b.HasKey("Id");

                b.HasAlternateKey("Caption");

                b.ToTable("WordGroup", null, t =>
                {
                    t.HasCheckConstraint("CK_WordGroup_Caption_MaxLength", "LENGTH(TRIM(\"Caption\")) <= 256");

                    t.HasCheckConstraint("CK_WordGroup_Caption_NotEmpty", "LENGTH(TRIM(\"Caption\")) > 0");

                    t.HasCheckConstraint("CK_WordGroup_Comment_NullOrMaxLength", "\"Comment\" IS NULL OR LENGTH(TRIM(\"Comment\")) <= 2048");

                    t.HasCheckConstraint("CK_WordGroup_Comment_NullOrNotEmpty", "\"Comment\" IS NULL OR LENGTH(TRIM(\"Comment\")) > 0");
                });
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.WordTag", b =>
            {
                b.Property<int>("WordId")
                    .HasColumnType("INTEGER");

                b.Property<int>("TagId")
                    .HasColumnType("INTEGER");

                b.HasKey("WordId", "TagId");

                b.HasIndex("TagId")
                    .HasDatabaseName("IX_WordTag_TagId");

                b.HasIndex("WordId")
                    .HasDatabaseName("IX_WordTag_WordId");

                b.ToTable("WordTag", (string)null);
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.Character", b =>
            {
                b.HasOne("JapaneseLanguageTools.Data.Entities.CharacterGroup", "CharacterGroup")
                    .WithMany("Characters")
                    .HasForeignKey("CharacterGroupId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.Navigation("CharacterGroup");
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.CharacterTag", b =>
            {
                b.HasOne("JapaneseLanguageTools.Data.Entities.Character", "Character")
                    .WithMany("CharacterTags")
                    .HasForeignKey("CharacterId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("JapaneseLanguageTools.Data.Entities.Tag", "Tag")
                    .WithMany()
                    .HasForeignKey("TagId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Character");

                b.Navigation("Tag");
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.Word", b =>
            {
                b.HasOne("JapaneseLanguageTools.Data.Entities.WordGroup", "WordGroup")
                    .WithMany("Words")
                    .HasForeignKey("WordGroupId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.Navigation("WordGroup");
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.WordTag", b =>
            {
                b.HasOne("JapaneseLanguageTools.Data.Entities.Tag", "Tag")
                    .WithMany()
                    .HasForeignKey("TagId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("JapaneseLanguageTools.Data.Entities.Word", "Word")
                    .WithMany("WordTags")
                    .HasForeignKey("WordId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Tag");

                b.Navigation("Word");
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.Character", b =>
            {
                b.Navigation("CharacterTags");
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.CharacterGroup", b =>
            {
                b.Navigation("Characters");
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.Word", b =>
            {
                b.Navigation("WordTags");
            });

            modelBuilder.Entity("JapaneseLanguageTools.Data.Entities.WordGroup", b =>
            {
                b.Navigation("Words");
            });
#pragma warning restore 612, 618
        }
    }
}
